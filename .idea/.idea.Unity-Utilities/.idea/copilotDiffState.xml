<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/Assets/Utils/LoadingScene/Examples/Demo/AdvancedLoadingSteps.cs">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/Assets/Utils/LoadingScene/Examples/Demo/AdvancedLoadingSteps.cs" />
              <option name="originalContent" value="using System.Threading.Tasks;&#10;using UnityEngine;&#10;using UnityEngine.Networking;&#10;using System.Collections.Generic;&#10;using System.IO;&#10;using System.Linq;&#10;&#10;namespace TirexGame.Utils.LoadingScene.Demo&#10;{&#10;    /// &lt;summary&gt;&#10;    /// Ví dụ các custom loading steps nâng cao&#10;    /// &lt;/summary&gt;&#10;    public static class AdvancedLoadingSteps&#10;    {&#10;        /// &lt;summary&gt;&#10;        /// Tạo loading sequence hoàn chỉnh cho game&#10;        /// &lt;/summary&gt;&#10;        public static List&lt;ILoadingStep&gt; CreateFullGameLoadingSequence(string targetScene, GameData gameData = null)&#10;        {&#10;            var steps = new List&lt;ILoadingStep&gt;&#10;            {&#10;                new InitializeSystemsStep(weight: 0.1f),&#10;                new LoadPlayerDataStep(gameData, weight: 0.15f),&#10;                new LoadGameAssetsStep(weight: 0.3f),&#10;                new ValidateGameDataStep(weight: 0.1f),&#10;                new PrepareSceneStep(targetScene, weight: 0.2f),&#10;                LoadingStepFactory.CreateSceneLoading(targetScene, weight: 0.15f)&#10;            };&#10;&#10;            return steps;&#10;        }&#10;&#10;        /// &lt;summary&gt;&#10;        /// Tạo loading sequence cho multiplayer game&#10;        /// &lt;/summary&gt;&#10;        public static List&lt;ILoadingStep&gt; CreateMultiplayerLoadingSequence(string roomId, string targetScene)&#10;        {&#10;            return new List&lt;ILoadingStep&gt;&#10;            {&#10;                new ConnectToServerStep(weight: 0.2f),&#10;                new AuthenticatePlayerStep(weight: 0.15f),&#10;                new JoinRoomStep(roomId, weight: 0.2f),&#10;                new SyncGameStateStep(weight: 0.15f),&#10;                new LoadMultiplayerAssetsStep(weight: 0.2f),&#10;                LoadingStepFactory.CreateSceneLoading(targetScene, weight: 0.1f)&#10;            };&#10;        }&#10;&#10;        /// &lt;summary&gt;&#10;        /// Tạo loading sequence cho download content&#10;        /// &lt;/summary&gt;&#10;        public static List&lt;ILoadingStep&gt; CreateDownloadContentSequence(List&lt;string&gt; downloadUrls, string targetScene)&#10;        {&#10;            var steps = new List&lt;ILoadingStep&gt;&#10;            {&#10;                new CheckDiskSpaceStep(weight: 0.05f),&#10;                new PrepareDownloadStep(weight: 0.05f)&#10;            };&#10;&#10;            // Add download steps for each URL&#10;            float downloadWeight = 0.7f / downloadUrls.Count;&#10;            foreach (var url in downloadUrls)&#10;            {&#10;                steps.Add(new DownloadContentStep(url, downloadWeight));&#10;            }&#10;&#10;            steps.AddRange(new List&lt;ILoadingStep&gt;&#10;            {&#10;                new ValidateDownloadsStep(weight: 0.1f),&#10;                new ExtractContentStep(weight: 0.05f),&#10;                LoadingStepFactory.CreateSceneLoading(targetScene, weight: 0.05f)&#10;            });&#10;&#10;            return steps;&#10;        }&#10;    }&#10;&#10;    #region ️ System Initialization Steps&#10;&#10;    public class InitializeSystemsStep : BaseLoadingStep&#10;    {&#10;        public InitializeSystemsStep(float weight = 1f) &#10;            : base(&quot;Initialize Systems&quot;, &quot;Khởi tạo các hệ thống cơ bản...&quot;, weight) { }&#10;&#10;        protected override async Task ExecuteStepAsync()&#10;        {&#10;            UpdateProgress(0f, &quot;Initializing audio system...&quot;);&#10;            await Task.Delay(200);&#10;&#10;            UpdateProgress(0.3f, &quot;Initializing input system...&quot;);&#10;            await Task.Delay(300);&#10;&#10;            UpdateProgress(0.6f, &quot;Initializing graphics settings...&quot;);&#10;            await Task.Delay(250);&#10;&#10;            UpdateProgress(0.9f, &quot;Finalizing system initialization...&quot;);&#10;            await Task.Delay(150);&#10;&#10;            UpdateProgress(1f, &quot;Systems initialized successfully!&quot;);&#10;        }&#10;    }&#10;&#10;    public class LoadPlayerDataStep : BaseLoadingStep&#10;    {&#10;        private readonly GameData gameData;&#10;&#10;        public LoadPlayerDataStep(GameData gameData, float weight = 1f) &#10;            : base(&quot;Load Player Data&quot;, &quot;Đang tải dữ liệu người chơi...&quot;, weight)&#10;        {&#10;            this.gameData = gameData;&#10;        }&#10;&#10;        protected override async Task ExecuteStepAsync()&#10;        {&#10;            UpdateProgress(0f);&#10;            await SimulateFileLoad(&quot;player_profile.json&quot;, 300);&#10;&#10;            UpdateProgress(0.4f);&#10;            await SimulateFileLoad(&quot;game_progress.dat&quot;, 400);&#10;&#10;            UpdateProgress(0.7f);&#10;            await SimulateFileLoad(&quot;settings.json&quot;, 200);&#10;&#10;            UpdateProgress(0.9f);&#10;            await Task.Delay(100);&#10;&#10;            if (gameData != null)&#10;            {&#10;                gameData.PlayerLevel = Random.Range(1, 100);&#10;                gameData.PlayerCoins = Random.Range(0, 10000);&#10;            }&#10;&#10;            UpdateProgress(1f);&#10;        }&#10;&#10;        private async Task SimulateFileLoad(string filename, int delay)&#10;        {&#10;            Debug.Log($&quot; Loading {filename}...&quot;);&#10;            await Task.Delay(delay);&#10;        }&#10;    }&#10;&#10;    #endregion&#10;&#10;    #region  Asset Loading Steps&#10;&#10;    public class LoadGameAssetsStep : BaseLoadingStep&#10;    {&#10;        private readonly string[] assetCategories = { &quot;UI&quot;, &quot;Audio&quot;, &quot;Textures&quot;, &quot;Models&quot;, &quot;Animations&quot; };&#10;&#10;        public LoadGameAssetsStep(float weight = 1f) &#10;            : base(&quot;Load Game Assets&quot;, &quot;Đang tải tài nguyên game...&quot;, weight) { }&#10;&#10;        protected override async Task ExecuteStepAsync()&#10;        {&#10;            for (int i = 0; i &lt; assetCategories.Length; i++)&#10;            {&#10;                float progress = (float)i / assetCategories.Length;&#10;                string category = assetCategories[i];&#10;                &#10;                UpdateProgress(progress);&#10;                &#10;                // Simulate loading time based on asset type&#10;                int loadTime = category switch&#10;                {&#10;                    &quot;Models&quot; =&gt; 800,&#10;                    &quot;Textures&quot; =&gt; 600,&#10;                    &quot;Audio&quot; =&gt; 400,&#10;                    &quot;Animations&quot; =&gt; 300,&#10;                    _ =&gt; 200&#10;                };&#10;&#10;                await Task.Delay(loadTime);&#10;                Debug.Log($&quot;✅ {category} assets loaded&quot;);&#10;            }&#10;&#10;            UpdateProgress(1f, &quot;All game assets loaded!&quot;);&#10;        }&#10;    }&#10;&#10;    public class LoadMultiplayerAssetsStep : BaseLoadingStep&#10;    {&#10;        public LoadMultiplayerAssetsStep(float weight = 1f) &#10;            : base(&quot;Load MP Assets&quot;, &quot;Đang tải tài nguyên multiplayer...&quot;, weight) { }&#10;&#10;        protected override async Task ExecuteStepAsync()&#10;        {&#10;            UpdateProgress(0f, &quot;Loading network prefabs...&quot;);&#10;            await Task.Delay(400);&#10;&#10;            UpdateProgress(0.4f, &quot;Loading player models...&quot;);&#10;            await Task.Delay(500);&#10;&#10;            UpdateProgress(0.8f, &quot;Loading shared resources...&quot;);&#10;            await Task.Delay(300);&#10;&#10;            UpdateProgress(1f, &quot;Multiplayer assets loaded!&quot;);&#10;        }&#10;    }&#10;&#10;    #endregion&#10;&#10;    #region  Network &amp; Multiplayer Steps&#10;&#10;    public class ConnectToServerStep : BaseLoadingStep&#10;    {&#10;        public ConnectToServerStep(float weight = 1f) &#10;            : base(&quot;Connect Server&quot;, &quot;Đang kết nối máy chủ...&quot;, weight) { }&#10;&#10;        protected override async Task ExecuteStepAsync()&#10;        {&#10;            UpdateProgress(0f, &quot;Resolving server address...&quot;);&#10;            await Task.Delay(200);&#10;&#10;            UpdateProgress(0.3f, &quot;Establishing connection...&quot;);&#10;            await Task.Delay(600);&#10;&#10;            UpdateProgress(0.7f, &quot;Performing handshake...&quot;);&#10;            await Task.Delay(300);&#10;&#10;            UpdateProgress(0.9f, &quot;Verifying connection...&quot;);&#10;            await Task.Delay(200);&#10;&#10;            // Simulate connection failure occasionally&#10;            if (Random.Range(0f, 1f) &lt; 0.1f) // 10% chance of failure&#10;            {&#10;                throw new System.Exception(&quot;Failed to connect to server. Please check your internet connection.&quot;);&#10;            }&#10;&#10;            UpdateProgress(1f, &quot;Connected to server!&quot;);&#10;        }&#10;    }&#10;&#10;    public class AuthenticatePlayerStep : BaseLoadingStep&#10;    {&#10;        public AuthenticatePlayerStep(float weight = 1f) &#10;            : base(&quot;Authenticate&quot;, &quot;Đang xác thực người chơi...&quot;, weight) { }&#10;&#10;        protected override async Task ExecuteStepAsync()&#10;        {&#10;            UpdateProgress(0f, &quot;Sending authentication request...&quot;);&#10;            await Task.Delay(300);&#10;&#10;            UpdateProgress(0.5f, &quot;Verifying credentials...&quot;);&#10;            await Task.Delay(400);&#10;&#10;            UpdateProgress(0.8f, &quot;Retrieving player profile...&quot;);&#10;            await Task.Delay(200);&#10;&#10;            UpdateProgress(1f, &quot;Authentication successful!&quot;);&#10;        }&#10;    }&#10;&#10;    public class JoinRoomStep : BaseLoadingStep&#10;    {&#10;        private readonly string roomId;&#10;&#10;        public JoinRoomStep(string roomId, float weight = 1f) &#10;            : base(&quot;Join Room&quot;, $&quot;Đang tham gia phòng {roomId}...&quot;, weight)&#10;        {&#10;            this.roomId = roomId;&#10;        }&#10;&#10;        protected override async Task ExecuteStepAsync()&#10;        {&#10;            UpdateProgress(0f, $&quot;Finding room {roomId}...&quot;);&#10;            await Task.Delay(300);&#10;&#10;            UpdateProgress(0.4f, &quot;Checking room availability...&quot;);&#10;            await Task.Delay(200);&#10;&#10;            UpdateProgress(0.7f, &quot;Joining room...&quot;);&#10;            await Task.Delay(400);&#10;&#10;            UpdateProgress(1f, &quot;Successfully joined room!&quot;);&#10;        }&#10;    }&#10;&#10;    public class SyncGameStateStep : BaseLoadingStep&#10;    {&#10;        public SyncGameStateStep(float weight = 1f) &#10;            : base(&quot;Sync Game State&quot;, &quot;Đang đồng bộ trạng thái game...&quot;, weight) { }&#10;&#10;        protected override async Task ExecuteStepAsync()&#10;        {&#10;            UpdateProgress(0f, &quot;Requesting game state...&quot;);&#10;            await Task.Delay(250);&#10;&#10;            UpdateProgress(0.3f, &quot;Downloading game data...&quot;);&#10;            await Task.Delay(500);&#10;&#10;            UpdateProgress(0.7f, &quot;Applying game state...&quot;);&#10;            await Task.Delay(300);&#10;&#10;            UpdateProgress(0.9f, &quot;Verifying synchronization...&quot;);&#10;            await Task.Delay(150);&#10;&#10;            UpdateProgress(1f, &quot;Game state synchronized!&quot;);&#10;        }&#10;    }&#10;&#10;    #endregion&#10;&#10;    #region  Download &amp; Content Steps&#10;&#10;    public class CheckDiskSpaceStep : BaseLoadingStep&#10;    {&#10;        public CheckDiskSpaceStep(float weight = 1f) &#10;            : base(&quot;Check Disk Space&quot;, &quot;Kiểm tra dung lượng ổ đĩa...&quot;, weight) { }&#10;&#10;        protected override async Task ExecuteStepAsync()&#10;        {&#10;            UpdateProgress(0f);&#10;            await Task.Delay(100);&#10;&#10;            // Simulate disk space check&#10;            long availableBytes = 1024L * 1024L * 1024L * 5; // 5GB&#10;            long requiredBytes = 1024L * 1024L * 1024L * 2;  // 2GB&#10;&#10;            UpdateProgress(0.5f);&#10;            await Task.Delay(50);&#10;&#10;            if (availableBytes &lt; requiredBytes)&#10;            {&#10;                throw new System.Exception($&quot;Insufficient disk space. Required: {requiredBytes / (1024*1024)}MB, Available: {availableBytes / (1024*1024)}MB&quot;);&#10;            }&#10;&#10;            UpdateProgress(1f);&#10;        }&#10;    }&#10;&#10;    public class PrepareDownloadStep : BaseLoadingStep&#10;    {&#10;        public PrepareDownloadStep(float weight = 1f) &#10;            : base(&quot;Prepare Download&quot;, &quot;Chuẩn bị download...&quot;, weight) { }&#10;&#10;        protected override async Task ExecuteStepAsync()&#10;        {&#10;            UpdateProgress(0f, &quot;Creating download directory...&quot;);&#10;            await Task.Delay(50);&#10;&#10;            UpdateProgress(0.5f, &quot;Initializing download manager...&quot;);&#10;            await Task.Delay(100);&#10;&#10;            UpdateProgress(1f, &quot;Download preparation complete!&quot;);&#10;        }&#10;    }&#10;&#10;    public class DownloadContentStep : BaseLoadingStep&#10;    {&#10;        private readonly string downloadUrl;&#10;&#10;        public DownloadContentStep(string url, float weight = 1f) &#10;            : base(&quot;Download Content&quot;, $&quot;Đang tải {Path.GetFileName(url)}...&quot;, weight)&#10;        {&#10;            downloadUrl = url;&#10;        }&#10;&#10;        protected override async Task ExecuteStepAsync()&#10;        {&#10;            string filename = Path.GetFileName(downloadUrl) ?? &quot;content&quot;;&#10;            &#10;            // Simulate download with realistic progress&#10;            int totalSteps = 20;&#10;            for (int i = 0; i &lt;= totalSteps; i++)&#10;            {&#10;                float progress = (float)i / totalSteps;&#10;                int downloadedMB = Mathf.RoundToInt(progress * 50); // Simulate 50MB file&#10;                &#10;                UpdateProgress(progress);&#10;                &#10;                // Variable delay to simulate network fluctuations&#10;                int delay = Random.Range(50, 150);&#10;                await Task.Delay(delay);&#10;            }&#10;&#10;            UpdateProgress(1f);&#10;        }&#10;    }&#10;&#10;    public class ValidateDownloadsStep : BaseLoadingStep&#10;    {&#10;        public ValidateDownloadsStep(float weight = 1f) &#10;            : base(&quot;Validate Downloads&quot;, &quot;Kiểm tra tính toàn vẹn file...&quot;, weight) { }&#10;&#10;        protected override async Task ExecuteStepAsync()&#10;        {&#10;            UpdateProgress(0f, &quot;Calculating checksums...&quot;);&#10;            await Task.Delay(300);&#10;&#10;            UpdateProgress(0.5f, &quot;Verifying file integrity...&quot;);&#10;            await Task.Delay(200);&#10;&#10;            UpdateProgress(0.8f, &quot;Checking file sizes...&quot;);&#10;            await Task.Delay(100);&#10;&#10;            UpdateProgress(1f, &quot;All downloads validated!&quot;);&#10;        }&#10;    }&#10;&#10;    public class ExtractContentStep : BaseLoadingStep&#10;    {&#10;        public ExtractContentStep(float weight = 1f) &#10;            : base(&quot;Extract Content&quot;, &quot;Giải nén nội dung...&quot;, weight) { }&#10;&#10;        protected override async Task ExecuteStepAsync()&#10;        {&#10;            UpdateProgress(0f, &quot;Preparing extraction...&quot;);&#10;            await Task.Delay(100);&#10;&#10;            UpdateProgress(0.3f, &quot;Extracting files...&quot;);&#10;            await Task.Delay(400);&#10;&#10;            UpdateProgress(0.8f, &quot;Organizing extracted content...&quot;);&#10;            await Task.Delay(200);&#10;&#10;            UpdateProgress(1f, &quot;Content extraction complete!&quot;);&#10;        }&#10;    }&#10;&#10;    #endregion&#10;&#10;    #region ✅ Validation Steps&#10;&#10;    public class ValidateGameDataStep : BaseLoadingStep&#10;    {&#10;        public ValidateGameDataStep(float weight = 1f) &#10;            : base(&quot;Validate Data&quot;, &quot;Kiểm tra dữ liệu game...&quot;, weight) { }&#10;&#10;        protected override async Task ExecuteStepAsync()&#10;        {&#10;            UpdateProgress(0f, &quot;Validating save files...&quot;);&#10;            await Task.Delay(150);&#10;&#10;            UpdateProgress(0.3f, &quot;Checking asset integrity...&quot;);&#10;            await Task.Delay(200);&#10;&#10;            UpdateProgress(0.6f, &quot;Verifying configuration...&quot;);&#10;            await Task.Delay(150);&#10;&#10;            UpdateProgress(0.9f, &quot;Running final validation...&quot;);&#10;            await Task.Delay(100);&#10;&#10;            UpdateProgress(1f, &quot;Game data validation complete!&quot;);&#10;        }&#10;    }&#10;&#10;    public class PrepareSceneStep : BaseLoadingStep&#10;    {&#10;        private readonly string targetScene;&#10;&#10;        public PrepareSceneStep(string targetScene, float weight = 1f) &#10;            : base(&quot;Prepare Scene&quot;, $&quot;Chuẩn bị scene {targetScene}...&quot;, weight)&#10;        {&#10;            this.targetScene = targetScene;&#10;        }&#10;&#10;        protected override async Task ExecuteStepAsync()&#10;        {&#10;            UpdateProgress(0f, &quot;Unloading unused assets...&quot;);&#10;            await Task.Delay(200);&#10;&#10;            UpdateProgress(0.4f, &quot;Preparing scene data...&quot;);&#10;            await Task.Delay(250);&#10;&#10;            UpdateProgress(0.7f, &quot;Optimizing memory...&quot;);&#10;            await Task.Delay(200);&#10;&#10;            UpdateProgress(0.9f, &quot;Finalizing scene preparation...&quot;);&#10;            await Task.Delay(100);&#10;&#10;            UpdateProgress(1f, $&quot;Scene {targetScene} ready to load!&quot;);&#10;        }&#10;    }&#10;&#10;    #endregion&#10;&#10;    /// &lt;summary&gt;&#10;    /// Demo game data class&#10;    /// &lt;/summary&gt;&#10;    [System.Serializable]&#10;    public class GameData&#10;    {&#10;        public int PlayerLevel { get; set; } = 1;&#10;        public int PlayerCoins { get; set; } = 0;&#10;        public string PlayerName { get; set; } = &quot;Player&quot;;&#10;        public float MusicVolume { get; set; } = 1f;&#10;        public float SFXVolume { get; set; } = 1f;&#10;        public bool IsFirstTime { get; set; } = true;&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="using System.Threading.Tasks;&#10;using UnityEngine;&#10;using UnityEngine.Networking;&#10;using System.Collections.Generic;&#10;using System.IO;&#10;using System.Linq;&#10;&#10;namespace TirexGame.Utils.LoadingScene.Demo&#10;{&#10;    /// &lt;summary&gt;&#10;    /// Ví dụ các custom loading steps nâng cao&#10;    /// &lt;/summary&gt;&#10;    public static class AdvancedLoadingSteps&#10;    {&#10;        /// &lt;summary&gt;&#10;        /// Tạo loading sequence hoàn chỉnh cho game&#10;        /// &lt;/summary&gt;&#10;        public static List&lt;ILoadingStep&gt; CreateFullGameLoadingSequence(string targetScene, GameData gameData = null)&#10;        {&#10;            var steps = new List&lt;ILoadingStep&gt;&#10;            {&#10;                new InitializeSystemsStep(weight: 0.1f),&#10;                new LoadPlayerDataStep(gameData, weight: 0.15f),&#10;                new LoadGameAssetsStep(weight: 0.3f),&#10;                new ValidateGameDataStep(weight: 0.1f),&#10;                new PrepareSceneStep(targetScene, weight: 0.2f),&#10;                LoadingStepFactory.CreateSceneLoading(targetScene, weight: 0.15f)&#10;            };&#10;&#10;            return steps;&#10;        }&#10;&#10;        /// &lt;summary&gt;&#10;        /// Tạo loading sequence cho multiplayer game&#10;        /// &lt;/summary&gt;&#10;        public static List&lt;ILoadingStep&gt; CreateMultiplayerLoadingSequence(string roomId, string targetScene)&#10;        {&#10;            return new List&lt;ILoadingStep&gt;&#10;            {&#10;                new ConnectToServerStep(weight: 0.2f),&#10;                new AuthenticatePlayerStep(weight: 0.15f),&#10;                new JoinRoomStep(roomId, weight: 0.2f),&#10;                new SyncGameStateStep(weight: 0.15f),&#10;                new LoadMultiplayerAssetsStep(weight: 0.2f),&#10;                LoadingStepFactory.CreateSceneLoading(targetScene, weight: 0.1f)&#10;            };&#10;        }&#10;&#10;        /// &lt;summary&gt;&#10;        /// Tạo loading sequence cho download content&#10;        /// &lt;/summary&gt;&#10;        public static List&lt;ILoadingStep&gt; CreateDownloadContentSequence(List&lt;string&gt; downloadUrls, string targetScene)&#10;        {&#10;            var steps = new List&lt;ILoadingStep&gt;&#10;            {&#10;                new CheckDiskSpaceStep(weight: 0.05f),&#10;                new PrepareDownloadStep(weight: 0.05f)&#10;            };&#10;&#10;            // Add download steps for each URL&#10;            float downloadWeight = 0.7f / downloadUrls.Count;&#10;            foreach (var url in downloadUrls)&#10;            {&#10;                steps.Add(new DownloadContentStep(url, downloadWeight));&#10;            }&#10;&#10;            steps.AddRange(new List&lt;ILoadingStep&gt;&#10;            {&#10;                new ValidateDownloadsStep(weight: 0.1f),&#10;                new ExtractContentStep(weight: 0.05f),&#10;                LoadingStepFactory.CreateSceneLoading(targetScene, weight: 0.05f)&#10;            });&#10;&#10;            return steps;&#10;        }&#10;    }&#10;&#10;    #region ️ System Initialization Steps&#10;&#10;    public class InitializeSystemsStep : BaseLoadingStep&#10;    {&#10;        public InitializeSystemsStep(float weight = 1f) &#10;            : base(&quot;Initialize Systems&quot;, &quot;Khởi tạo các hệ thống cơ bản...&quot;, weight) { }&#10;&#10;        protected override async Task ExecuteStepAsync()&#10;        {&#10;            UpdateProgress(0f);&#10;            await Task.Delay(200);&#10;&#10;            UpdateProgress(0.3f);&#10;            await Task.Delay(300);&#10;&#10;            UpdateProgress(0.6f);&#10;            await Task.Delay(250);&#10;&#10;            UpdateProgress(0.9f);&#10;            await Task.Delay(150);&#10;&#10;            UpdateProgress(1f);&#10;        }&#10;    }&#10;&#10;    public class LoadPlayerDataStep : BaseLoadingStep&#10;    {&#10;        private readonly GameData gameData;&#10;&#10;        public LoadPlayerDataStep(GameData gameData, float weight = 1f) &#10;            : base(&quot;Load Player Data&quot;, &quot;Đang tải dữ liệu người chơi...&quot;, weight)&#10;        {&#10;            this.gameData = gameData;&#10;        }&#10;&#10;        protected override async Task ExecuteStepAsync()&#10;        {&#10;            UpdateProgress(0f);&#10;            await SimulateFileLoad(&quot;player_profile.json&quot;, 300);&#10;&#10;            UpdateProgress(0.4f);&#10;            await SimulateFileLoad(&quot;game_progress.dat&quot;, 400);&#10;&#10;            UpdateProgress(0.7f);&#10;            await SimulateFileLoad(&quot;settings.json&quot;, 200);&#10;&#10;            UpdateProgress(0.9f);&#10;            await Task.Delay(100);&#10;&#10;            if (gameData != null)&#10;            {&#10;                gameData.PlayerLevel = Random.Range(1, 100);&#10;                gameData.PlayerCoins = Random.Range(0, 10000);&#10;            }&#10;&#10;            UpdateProgress(1f);&#10;        }&#10;&#10;        private async Task SimulateFileLoad(string filename, int delay)&#10;        {&#10;            Debug.Log($&quot; Loading {filename}...&quot;);&#10;            await Task.Delay(delay);&#10;        }&#10;    }&#10;&#10;    #endregion&#10;&#10;    #region  Asset Loading Steps&#10;&#10;    public class LoadGameAssetsStep : BaseLoadingStep&#10;    {&#10;        private readonly string[] assetCategories = { &quot;UI&quot;, &quot;Audio&quot;, &quot;Textures&quot;, &quot;Models&quot;, &quot;Animations&quot; };&#10;&#10;        public LoadGameAssetsStep(float weight = 1f) &#10;            : base(&quot;Load Game Assets&quot;, &quot;Đang tải tài nguyên game...&quot;, weight) { }&#10;&#10;        protected override async Task ExecuteStepAsync()&#10;        {&#10;            for (int i = 0; i &lt; assetCategories.Length; i++)&#10;            {&#10;                float progress = (float)i / assetCategories.Length;&#10;                string category = assetCategories[i];&#10;                &#10;                UpdateProgress(progress);&#10;                &#10;                // Simulate loading time based on asset type&#10;                int loadTime = category switch&#10;                {&#10;                    &quot;Models&quot; =&gt; 800,&#10;                    &quot;Textures&quot; =&gt; 600,&#10;                    &quot;Audio&quot; =&gt; 400,&#10;                    &quot;Animations&quot; =&gt; 300,&#10;                    _ =&gt; 200&#10;                };&#10;&#10;                await Task.Delay(loadTime);&#10;                Debug.Log($&quot;✅ {category} assets loaded&quot;);&#10;            }&#10;&#10;            UpdateProgress(1f);&#10;        }&#10;    }&#10;&#10;    public class LoadMultiplayerAssetsStep : BaseLoadingStep&#10;    {&#10;        public LoadMultiplayerAssetsStep(float weight = 1f) &#10;            : base(&quot;Load MP Assets&quot;, &quot;Đang tải tài nguyên multiplayer...&quot;, weight) { }&#10;&#10;        protected override async Task ExecuteStepAsync()&#10;        {&#10;            UpdateProgress(0f);&#10;            await Task.Delay(400);&#10;&#10;            UpdateProgress(0.4f);&#10;            await Task.Delay(500);&#10;&#10;            UpdateProgress(0.8f);&#10;            await Task.Delay(300);&#10;&#10;            UpdateProgress(1f);&#10;        }&#10;    }&#10;&#10;    #endregion&#10;&#10;    #region  Network &amp; Multiplayer Steps&#10;&#10;    public class ConnectToServerStep : BaseLoadingStep&#10;    {&#10;        public ConnectToServerStep(float weight = 1f) &#10;            : base(&quot;Connect Server&quot;, &quot;Đang kết nối máy chủ...&quot;, weight) { }&#10;&#10;        protected override async Task ExecuteStepAsync()&#10;        {&#10;            UpdateProgress(0f);&#10;            await Task.Delay(200);&#10;&#10;            UpdateProgress(0.3f);&#10;            await Task.Delay(600);&#10;&#10;            UpdateProgress(0.7f);&#10;            await Task.Delay(300);&#10;&#10;            UpdateProgress(0.9f);&#10;            await Task.Delay(200);&#10;&#10;            // Simulate connection failure occasionally&#10;            if (Random.Range(0f, 1f) &lt; 0.1f) // 10% chance of failure&#10;            {&#10;                throw new System.Exception(&quot;Failed to connect to server. Please check your internet connection.&quot;);&#10;            }&#10;&#10;            UpdateProgress(1f);&#10;        }&#10;    }&#10;&#10;    public class AuthenticatePlayerStep : BaseLoadingStep&#10;    {&#10;        public AuthenticatePlayerStep(float weight = 1f) &#10;            : base(&quot;Authenticate&quot;, &quot;Đang xác thực người chơi...&quot;, weight) { }&#10;&#10;        protected override async Task ExecuteStepAsync()&#10;        {&#10;            UpdateProgress(0f);&#10;            await Task.Delay(300);&#10;&#10;            UpdateProgress(0.5f);&#10;            await Task.Delay(400);&#10;&#10;            UpdateProgress(0.8f);&#10;            await Task.Delay(200);&#10;&#10;            UpdateProgress(1f);&#10;        }&#10;    }&#10;&#10;    public class JoinRoomStep : BaseLoadingStep&#10;    {&#10;        private readonly string roomId;&#10;&#10;        public JoinRoomStep(string roomId, float weight = 1f) &#10;            : base(&quot;Join Room&quot;, $&quot;Đang tham gia phòng {roomId}...&quot;, weight)&#10;        {&#10;            this.roomId = roomId;&#10;        }&#10;&#10;        protected override async Task ExecuteStepAsync()&#10;        {&#10;            UpdateProgress(0f);&#10;            await Task.Delay(300);&#10;&#10;            UpdateProgress(0.4f);&#10;            await Task.Delay(200);&#10;&#10;            UpdateProgress(0.7f);&#10;            await Task.Delay(400);&#10;&#10;            UpdateProgress(1f);&#10;        }&#10;    }&#10;&#10;    public class SyncGameStateStep : BaseLoadingStep&#10;    {&#10;        public SyncGameStateStep(float weight = 1f) &#10;            : base(&quot;Sync Game State&quot;, &quot;Đang đồng bộ trạng thái game...&quot;, weight) { }&#10;&#10;        protected override async Task ExecuteStepAsync()&#10;        {&#10;            UpdateProgress(0f);&#10;            await Task.Delay(250);&#10;&#10;            UpdateProgress(0.3f);&#10;            await Task.Delay(500);&#10;&#10;            UpdateProgress(0.7f);&#10;            await Task.Delay(300);&#10;&#10;            UpdateProgress(0.9f);&#10;            await Task.Delay(150);&#10;&#10;            UpdateProgress(1f);&#10;        }&#10;    }&#10;&#10;    #endregion&#10;&#10;    #region  Download &amp; Content Steps&#10;&#10;    public class CheckDiskSpaceStep : BaseLoadingStep&#10;    {&#10;        public CheckDiskSpaceStep(float weight = 1f) &#10;            : base(&quot;Check Disk Space&quot;, &quot;Kiểm tra dung lượng ổ đĩa...&quot;, weight) { }&#10;&#10;        protected override async Task ExecuteStepAsync()&#10;        {&#10;            UpdateProgress(0f);&#10;            await Task.Delay(100);&#10;&#10;            // Simulate disk space check&#10;            long availableBytes = 1024L * 1024L * 1024L * 5; // 5GB&#10;            long requiredBytes = 1024L * 1024L * 1024L * 2;  // 2GB&#10;&#10;            UpdateProgress(0.5f);&#10;            await Task.Delay(50);&#10;&#10;            if (availableBytes &lt; requiredBytes)&#10;            {&#10;                throw new System.Exception($&quot;Insufficient disk space. Required: {requiredBytes / (1024*1024)}MB, Available: {availableBytes / (1024*1024)}MB&quot;);&#10;            }&#10;&#10;            UpdateProgress(1f);&#10;        }&#10;    }&#10;&#10;    public class PrepareDownloadStep : BaseLoadingStep&#10;    {&#10;        public PrepareDownloadStep(float weight = 1f) &#10;            : base(&quot;Prepare Download&quot;, &quot;Chuẩn bị download...&quot;, weight) { }&#10;&#10;        protected override async Task ExecuteStepAsync()&#10;        {&#10;            UpdateProgress(0f);&#10;            await Task.Delay(50);&#10;&#10;            UpdateProgress(0.5f);&#10;            await Task.Delay(100);&#10;&#10;            UpdateProgress(1f);&#10;        }&#10;    }&#10;&#10;    public class DownloadContentStep : BaseLoadingStep&#10;    {&#10;        private readonly string downloadUrl;&#10;&#10;        public DownloadContentStep(string url, float weight = 1f) &#10;            : base(&quot;Download Content&quot;, $&quot;Đang tải {Path.GetFileName(url)}...&quot;, weight)&#10;        {&#10;            downloadUrl = url;&#10;        }&#10;&#10;        protected override async Task ExecuteStepAsync()&#10;        {&#10;            string filename = Path.GetFileName(downloadUrl) ?? &quot;content&quot;;&#10;            &#10;            // Simulate download with realistic progress&#10;            int totalSteps = 20;&#10;            for (int i = 0; i &lt;= totalSteps; i++)&#10;            {&#10;                float progress = (float)i / totalSteps;&#10;                int downloadedMB = Mathf.RoundToInt(progress * 50); // Simulate 50MB file&#10;                &#10;                UpdateProgress(progress);&#10;                &#10;                // Variable delay to simulate network fluctuations&#10;                int delay = Random.Range(50, 150);&#10;                await Task.Delay(delay);&#10;            }&#10;&#10;            UpdateProgress(1f);&#10;        }&#10;    }&#10;&#10;    public class ValidateDownloadsStep : BaseLoadingStep&#10;    {&#10;        public ValidateDownloadsStep(float weight = 1f) &#10;            : base(&quot;Validate Downloads&quot;, &quot;Kiểm tra tính toàn vẹn file...&quot;, weight) { }&#10;&#10;        protected override async Task ExecuteStepAsync()&#10;        {&#10;            UpdateProgress(0f);&#10;            await Task.Delay(300);&#10;&#10;            UpdateProgress(0.5f);&#10;            await Task.Delay(200);&#10;&#10;            UpdateProgress(0.8f);&#10;            await Task.Delay(100);&#10;&#10;            UpdateProgress(1f);&#10;        }&#10;    }&#10;&#10;    public class ExtractContentStep : BaseLoadingStep&#10;    {&#10;        public ExtractContentStep(float weight = 1f) &#10;            : base(&quot;Extract Content&quot;, &quot;Giải nén nội dung...&quot;, weight) { }&#10;&#10;        protected override async Task ExecuteStepAsync()&#10;        {&#10;            UpdateProgress(0f);&#10;            await Task.Delay(100);&#10;&#10;            UpdateProgress(0.3f);&#10;            await Task.Delay(400);&#10;&#10;            UpdateProgress(0.8f);&#10;            await Task.Delay(200);&#10;&#10;            UpdateProgress(1f);&#10;        }&#10;    }&#10;&#10;    #endregion&#10;&#10;    #region ✅ Validation Steps&#10;&#10;    public class ValidateGameDataStep : BaseLoadingStep&#10;    {&#10;        public ValidateGameDataStep(float weight = 1f) &#10;            : base(&quot;Validate Data&quot;, &quot;Kiểm tra dữ liệu game...&quot;, weight) { }&#10;&#10;        protected override async Task ExecuteStepAsync()&#10;        {&#10;            UpdateProgress(0f);&#10;            await Task.Delay(150);&#10;&#10;            UpdateProgress(0.3f);&#10;            await Task.Delay(200);&#10;&#10;            UpdateProgress(0.6f);&#10;            await Task.Delay(150);&#10;&#10;            UpdateProgress(0.9f);&#10;            await Task.Delay(100);&#10;&#10;            UpdateProgress(1f);&#10;        }&#10;    }&#10;&#10;    public class PrepareSceneStep : BaseLoadingStep&#10;    {&#10;        private readonly string targetScene;&#10;&#10;        public PrepareSceneStep(string targetScene, float weight = 1f) &#10;            : base(&quot;Prepare Scene&quot;, $&quot;Chuẩn bị scene {targetScene}...&quot;, weight)&#10;        {&#10;            this.targetScene = targetScene;&#10;        }&#10;&#10;        protected override async Task ExecuteStepAsync()&#10;        {&#10;            UpdateProgress(0f);&#10;            await Task.Delay(200);&#10;&#10;            UpdateProgress(0.4f);&#10;            await Task.Delay(250);&#10;&#10;            UpdateProgress(0.7f);&#10;            await Task.Delay(200);&#10;&#10;            UpdateProgress(0.9f);&#10;            await Task.Delay(100);&#10;&#10;            UpdateProgress(1f);&#10;        }&#10;    }&#10;&#10;    #endregion&#10;&#10;    /// &lt;summary&gt;&#10;    /// Demo game data class&#10;    /// &lt;/summary&gt;&#10;    [System.Serializable]&#10;    public class GameData&#10;    {&#10;        public int PlayerLevel { get; set; } = 1;&#10;        public int PlayerCoins { get; set; } = 0;&#10;        public string PlayerName { get; set; } = &quot;Player&quot;;&#10;        public float MusicVolume { get; set; } = 1f;&#10;        public float SFXVolume { get; set; } = 1f;&#10;        public bool IsFirstTime { get; set; } = true;&#10;    }&#10;}&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>